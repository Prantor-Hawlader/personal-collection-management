generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  image          String?
  email          String    @unique
  password       String?
  role           String    @default("user")
  status         String    @default("active")
  authProviderId String?
  comments       Comment[]
  likes          Like[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  collections Collection[]
}

model Collection {
  id                 String   @id @default(cuid())
  name               String
  description        String
  image              String?
  userId             String
  category           Category @relation(fields: [categoryId], references: [id])
  items              Item[]
  categoryId         String
  customString1Name  String?
  customString2Name  String?
  customString3Name  String?
  customInteger1Name String?
  customInteger2Name String?
  customInteger3Name String?
  customText1Name    String?
  customText2Name    String?
  customText3Name    String?
  customBoolean1Name String?
  customBoolean2Name String?
  customBoolean3Name String?
  customDate1Name    String?
  customDate2Name    String?
  customDate3Name    String?

  @@index([categoryId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  items Item[]
}

model Item {
  id             String     @id @default(cuid())
  name           String
  userId         String
  tags           Tag[]
  likes          Int        @default(0)
  comments       Comment[]
  likesList      Like[]
  collectionId   String
  collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  customString1  String?
  customString2  String?
  customString3  String?
  customInteger1 Int?
  customInteger2 Int?
  customInteger3 Int?
  customText1    String?
  customText2    String?
  customText3    String?
  customBoolean1 Boolean?
  customBoolean2 Boolean?
  customBoolean3 Boolean?
  customDate1    DateTime?
  customDate2    DateTime?
  customDate3    DateTime?

  createdAt DateTime @default(now())

  @@index([collectionId])
}

model Comment {
  id     String @id @default(cuid())
  text   String
  userId String
  itemId String

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([itemId])
  @@index([userId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  itemId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([userId])
}
